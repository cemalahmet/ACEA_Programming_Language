# 2.1. Program
<program> ::= begin <stmts> end
<stmts> ::= <stmt> | <stmt> <stmts> | <comment> <stmts> | <comment>
<stmt> ::= <open_stmt> | <closed_stmt>
<simple_stmt> ::= <assn_stmt> | <assn_declare_stmt> | <return_stmt> | 
		  <while_stmt> | <input_stmt> | <output_stmt> | <function_stmt> | 
		  <empty_stmt> | <block_stmt> | <function_definition>
<comment> ::= /* <string> */
<string> ::= <non_empty_string> | <empty>
<non_empty_string> ::= <char> <string> | <char>
<char> ::= <digit> | <letter> | ! | ‘ | ? | ( | ) | * …
<empty> ::= “”

# 2.2. Types
<identifier> ::= <identifier><letter> | <letter> | <identifier><digit>
<type_name> ::= num | string
<type_declare> ::= <type_name> | final <type_name>
<const> ::= <num_type> | <string_type>
<num_type> ::= [+-]?[0-9]*(\.)? [0-9]+
<string_type> ::= “<string>”

# 2.3. Expressions
<expression> ::= <expression> <logical_op> <logic> | <logic>
<logic>::= <logic> <relational_op> <relation> | <relation>
<relation> ::= <relation> <low_op> <term> | <term>
<term> ::= <term> <high_op> <factor> | <factor>
<factor> ::= (<expression>) | <identifier> |
		<const> | <function_call> | <builtin_variable> | !<factor> 
<high_op> ::= * | / | %
<low_op> ::= + | - 
<relational_op> ::= < | > | == | != | <= | >=
<logical_op> ::= “&&” | “||”

# 2.4. Functions 
<function_definition> ::= <type_declare> <function_identifier>(<function_arguments>) {<stmts>}
<function_identifier> ::= <identifier>
<function_arguments> ::=  <non_empty_function_arguments> | <empty>
<non_empty_function_arguments> ::= <type_declare> <identifier> |
			       <type_declare> <identifier>, <non_empty_function_arguments>
<function_call_arguments> ::= <empty> | <non_empty_function_call_arguments>
<non_empty_function_call_arguments> ::= <expression> | <expression>, 										<non_empty_function_call_arguments>
<user_function_call> ::= <function_identifier>(<function_call_arguments>)
<function_call> ::= <user_function_call> | <builtin_function>

# 2.5. Statements
<block_stmt> ::= {<stmts>}
<empty_stmt> ::= ;
<assn_stmt> ::= <assn> ;
<assn> ::= <identifier> = <expression>
<assn_declare> ::= <assn> | <identfier>
<multiple_assn_declare> ::= <assn_declare> | <assn_declare> , <multiple_assn_declare> 
<assn_declare_stmt> ::= <type_declare> <multiple_assn_declare> ;

<closed_stmt> ::= <simple_stmt> |
		  if (<expression>) <closed_stmt> else <closed_stmt> | 
		  while (<expression>) <closed_stmt> |
		  <for_body> <closed_stmt> |
		  do <closed_stmt> while (<expression>) ;
<open_stmt> ::= if (<expression>) <simple_stmt> | 
		if (<expression>) <open_stmt> |
		if (<expression>) <closed_stmt> else <open_stmt> |
		while (<expression>) <open_stmt> |
		<for_body> <open_stmt> |
		do <open_stmt> while (<expression>) ;

<for_body> ::= for (<init_stmt> <for_expression> <looping_stmt>)
<init_stmt> ::= <assn_declare_stmt> | <assn_stmt> | <empty_stmt>
<for_expression> ::= <expression> ; | <empty_stmt>
<looping_stmt> ::= <assn> | <empty>

<input_stmt> ::= __scan(<identifier>);
<output_stmt> ::= __print(<expression>);

<function_stmt> ::= <function_call> ;
<return_stmt> ::= return ; | return <expression> ;

# 2.6. Built-in Functions and Variables

<builtin_variable> ::= __incline | __altitude | __temperature |
			 __acceleration | __connection
<builtin_function> ::= __up(<expression>) | forward(<expression>) |
__left(<expression>) | __right(<expression>) |
__back(<expression>) | __down(<expression>) |
__rotate_left(<expression>) | __rotate_right(<expression>) |
__back_flip() | __front_flip() | __right_flip() | __left_flip() |
__land() | __switch_camera() | __take_picture() |
__timer_start() | __timer_stop() | __timer_time() | __connect() |
__disconnect()

